---
import { getCollection, render, type CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { SEO } from "astro-seo";

import Layout from '../../layouts/Layout.astro';
import Share from '../../components/Share.astro';
import iyan from '../../assets/iyan.webp';

type BlogPost = CollectionEntry<'blog'>;

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog');
  const paths = await Promise.all(
    blogPosts.map(async (post: BlogPost) => {
      const rendered = await post.render();
      return {
        params: { slug: post.slug },
        props: { 
          post,
          Content: rendered.Content
        }
      };
    })
  );
  
  return paths;
}

const { post, Content } = Astro.props as { 
  post: CollectionEntry<'blog'>,
  Content: any
};

const { remarkPluginFrontmatter } = await render(post);

---

<Layout title={post.data.title}>
  <SEO
		slot="seo"
    title={post.data.title}
    description={post.data.excerpt}

    openGraph={{
      basic: {
        title: post.data.title,
        type: "Website",
        image: post.data.image,
      }
    }}
  />

  <article class="mt-content">
    <div class="content-header">
      <h1>
        {post.data.title}
      </h1>
      <div class="meta">
        <div class="image">
          <Image src={iyan} alt="Author Image" />
        </div>
        <div class="text">
          <p>
            {post.data.author}
          </p>
          <div class="meta-row">
            <time datetime={post.data.publishedAt}>
              {post.data.publishedAt}
            </time>
            <span> &bull; </span>
            <p>{remarkPluginFrontmatter.minutesRead}</p>
          </div>
        </div>
      </div>
    </div>

    <Share />

    <div class="picture">
      <Image inferSize src={post.data.image} alt={post.data.image} />
    </div>

    <div class="my-4 d-flex flex-column gap-2">
      <small>Category: <span class="fw-bold text-black">{post.data.category}</span></small>
      <div class="d-flex flex-wrap gap-2">
      <small>Tags:</small>
        {post.data.tags && (
          <div class="d-flex flex-wrap gap-1">
            {post.data.tags.map((tag) => (
              <span class="badge bg-secondary">{tag}</span>
            ))}
          </div>
        )}
      </div>
    </div>

    <div class="content text-justify">
      <Content />
    </div>

    <Share />
  
    <div id="disqus_thread"></div>

  </article>

</Layout>

<script is:inline define:vars={{ PAGE_URL: Astro.url.href, PAGE_IDENTIFIER: post.slug }}>
  /**
  *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
  *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */

  var disqus_config = function () {
  this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
  this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
  };
  
  (function() { // DON'T EDIT BELOW THIS LINE
  var d = document, s = d.createElement('script');
  s.src = 'https://software-tech-portal.disqus.com/embed.js';
  s.setAttribute('data-timestamp', +new Date());
  (d.head || d.body).appendChild(s);
  })();
</script>

<style>
  article {
    display: grid;
    grid-template-columns: repeat(1fr);
    max-width: 64rem;
    padding: 6rem 2rem;
    background-color: #fff;
    margin: 0 auto;
  }

  article .content-header {
    display: flex;
    flex-direction: column;
    /* gap: 1rem; */
    align-items: center;
    text-align: center;
    margin: 0 auto;
  }

  article .meta {
    display: flex;
    /* align-items: center; */
    /* gap: 1rem; */
    font-size: 0.875rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  article .meta > div {
    margin-right: 1rem;
  }

  article .meta .image {
    width: 52px;
    height: 52px;
    aspect-ratio: 1 / 1;
    overflow: hidden;
    flex-shrink: 0;
  }

  article .meta .image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 9999px;
  }

  article .meta .text {
    display: flex;
    flex-direction: column;
    align-items: start;
  }

  article .meta .text > p {
    font-size: 1.25rem;
    font-weight: 300;
    margin-bottom: 0;
  }

  article .meta .text div:last-child span {
    margin: 0 0.5rem;
  }

  article .meta-row {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  article .meta-row p {
    margin: 0;
  }

  article .content-header h1 {
    max-width: 768px;
  }

  article.picture {
    /* width: 100%; */
    height: 500px;
    /* overflow: hidden; */
    /* margin-top: 1rem; */
    border-radius: 0.5rem;
  }

  article .picture img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 0.5rem;
  }

  article #disqus_thread {
    margin-top: 4rem;
  }

  article .astro-social-share {
    background-color: aqua;
    /* margin-top: 2rem; */
    /* display: flex; */
    /* justify-content: center; */
    /* gap: 1rem; */
  }

</style>